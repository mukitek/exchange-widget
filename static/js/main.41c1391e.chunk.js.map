{"version":3,"sources":["redux/actions.tsx","Model/PocketPosition.ts","Model/Currency.ts","Model/currencySymbols.ts","components/Pocket.tsx","components/Transaction.tsx","containers/TransactionContainer.ts","components/Header.tsx","containers/HeaderContainer.ts","components/ExchangeWidget.tsx","containers/ExchangeWidgetContainer.ts","App.tsx","serviceWorker.ts","redux/initialState.ts","redux/reducers.ts","redux/store.js","index.tsx"],"names":["updateRatesSuccess","rates","type","PocketPosition","Currency","symbols","EUR","GBP","USD","Pocket","handleCurrencyChange","event","props","position","currentTarget","value","handleValueChange","test","this","currency","balance","currencyOptions","Object","values","map","v","index","key","className","onChange","FROM","React","PureComponent","Transaction","to","from","toProps","TO","fromProps","TransactionContainer","connect","state","getToBalance","pockets","find","p","toBalance","getFromBalance","fromBalance","dispatch","updateCurrency","updateValue","Header","handleExchange","rate","toSymbol","fromSymbol","console","log","toFixed","onClick","HeaderContainer","ExchangeWidget","getRates","setInterval","ExchangeWidgetContainer","a","fetch","then","response","json","error","App","Boolean","window","location","hostname","match","initialExchangeWidgetState","calculateRate","fromCurrency","toCurrency","calculateValue","newValue","parseFloat","isNaN","formatValue","Math","floor","store","createStore","action","newRate","pocket","deducted","summed","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.41c1391e.chunk.js","sourcesContent":["// action types\nimport {PocketPosition} from \"../Model/PocketPosition\";\nimport {Currency} from \"../Model/Currency\";\nimport {RatesMap} from \"../Model/AppState\";\nimport {AppThunk} from \"../Model/AppThunk\";\n\nexport const UPDATE_CURRENCY = 'UPDATE_CURRENCY';\nexport const UPDATE_VALUE = 'UPDATE_VALUE';\nexport const UPDATE_RATES_REQUEST = 'UPDATE_RATES_REQUEST';\nexport const UPDATE_RATES_SUCCESS = 'UPDATE_RATES_SUCCESS';\nexport const UPDATE_RATES_FAILURE = 'UPDATE_RATES_FAILURE';\nexport const EXCHANGE_MONEY = 'EXCHANGE_MONEY';\n\n// action type interfaces\ninterface UpdateCurrencyAction {\n    type: typeof UPDATE_CURRENCY;\n    currency: Currency;\n    position: PocketPosition;\n}\n\ninterface UpdateValueAction {\n    type: typeof UPDATE_VALUE;\n    value: string;\n    position: PocketPosition;\n}\n\ninterface UpdateRatesRequestAction {\n    type: typeof UPDATE_RATES_REQUEST;\n}\n\ninterface UpdateRatesSuccessAction {\n    type: typeof UPDATE_RATES_SUCCESS;\n    rates: RatesMap;\n}\n\ninterface UpdateRatesFailureAction {\n    type: typeof UPDATE_RATES_FAILURE;\n}\n\ninterface ExchangeMoneyAction {\n    type: typeof EXCHANGE_MONEY\n}\n\n// action creators\nexport function updateCurrency(currency: Currency, position: PocketPosition): UpdateCurrencyAction {\n    return { type: UPDATE_CURRENCY, currency, position }\n}\n\nexport function updateValue(value: string, position: PocketPosition): UpdateValueAction {\n    return { type: UPDATE_VALUE, value, position }\n}\n\nexport function exchangeMoney() : ExchangeMoneyAction {\n    return { type: EXCHANGE_MONEY}\n}\n\nexport function updateRatesRequest(): AppThunk {\n    return async (dispatch) => {\n        return fetch(`http://openexchangerates.org/api/latest.json?app_id=7df096213cf54d458e186ca050abf2a5`)\n            .then(\n                response => {\n                    return response.json();\n                },\n                error => dispatch(updateRatesFailure(error))\n            )\n            .then(json => {\n                console.log('json', json.rates);\n                const rates:RatesMap = {\n                    EUR: json.rates['EUR'],\n                    GBP: json.rates['GBP'],\n                    USD: json.rates['USD']\n                };\n                return dispatch(updateRatesSuccess(rates))\n            })\n    }\n}\n\nexport function updateRatesSuccess(rates: RatesMap): UpdateRatesSuccessAction {\n    return { type: UPDATE_RATES_SUCCESS, rates }\n}\n\nexport function updateRatesFailure(error: any): UpdateRatesFailureAction {\n    return { type: UPDATE_RATES_FAILURE }\n}\n\nexport type ExchangeWidgetTypes = UpdateValueAction | UpdateCurrencyAction | ExchangeMoneyAction;\nexport type ExchangeWidgetAsyncTypes = UpdateRatesSuccessAction | UpdateRatesFailureAction | UpdateRatesRequestAction | any;\n\n","export enum PocketPosition {\n    TO = 'TO',\n    FROM = 'FROM'\n}\n","export enum Currency {\n    EUR ='EUR',\n    GBP ='GBP',\n    USD ='USD'\n}\n","import {Currency} from \"./Currency\";\n\nexport const symbols: {[c in Currency]:string } = {\n    [Currency.EUR]: '€',\n    [Currency.GBP]: '£',\n    [Currency.USD]: '$'\n};\n","import React from 'react';\nimport {IMoney} from \"../Model/IMoney\";\nimport {PocketPosition} from \"../Model/PocketPosition\";\nimport {Currency} from \"../Model/Currency\";\nimport {symbols} from \"../Model/currencySymbols\";\n\nexport type PocketProps = IMoney & {\n    position: PocketPosition,\n    handleCurrencyChange: Function,\n    handleValueChange: Function,\n    balance: string\n};\n\nexport class Pocket extends React.PureComponent<PocketProps> {\n    render() {\n        const {currency, value, balance, position} = this.props;\n        const currencyOptions = Object.values(Currency).map((v: string, index: number) => (\n            <option key={index} value={v}>{v}</option>));\n        return (\n            <div className={'pocket'}>\n                <div className={'row row1 columns'}>\n                    <div className={'currency col-2'}>\n                        <select value={currency} onChange={this.handleCurrencyChange}>{currencyOptions}\n                        </select>\n                    </div>\n                    <div className={'money col-10'}>\n                        {position === PocketPosition.FROM ? '-' : '+'}\n                        <input type=\"number\" value={value} onChange={this.handleValueChange} />\n                    </div>\n                </div>\n                <div className={'row row2 columns'}>\n                    <div className={'balance col-6'}>Balance: {symbols[currency]}{balance}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    handleCurrencyChange = (event: React.FormEvent<HTMLSelectElement>) =>{\n        const {handleCurrencyChange, position} = this.props;\n        handleCurrencyChange(event.currentTarget.value, position);\n    };\n\n    handleValueChange = (event: React.FormEvent<HTMLInputElement>) => {\n        const {handleValueChange, position} = this.props;\n        const pattern = /^\\d*(\\.\\d{0,2})?$/;\n        const result = pattern.test(event.currentTarget.value);\n        if(result){\n            handleValueChange(event.currentTarget.value, position)\n        }\n    };\n}\n","import React from 'react';\nimport {PocketProps, Pocket} from \"./Pocket\";\nimport {IMoneyWithBalance} from \"../Model/IMoney\";\nimport {PocketPosition} from '../Model/PocketPosition';\n\nexport type TransactionDispatchProps = {handleCurrencyChange:Function, handleValueChange: Function}\nexport type TransactionStateProps = {to:IMoneyWithBalance, from:IMoneyWithBalance, }\nexport type TransactionProps = TransactionDispatchProps & TransactionStateProps;\n\nexport class Transaction extends React.PureComponent<TransactionProps>{\n    render(){\n        const { to, from, handleValueChange, handleCurrencyChange} = this.props;\n        const toProps: PocketProps = {...to, position:PocketPosition.TO, handleValueChange, handleCurrencyChange};\n        const fromProps: PocketProps = {...from, position:PocketPosition.FROM, handleCurrencyChange, handleValueChange};\n        return(\n            <div className={'transaction'}>\n                <Pocket {...fromProps}/>\n                <Pocket {...toProps}/>\n            </div>\n        )\n    }\n}\n\n","import {connect} from \"react-redux\";\nimport {Transaction, TransactionDispatchProps, TransactionStateProps} from \"../components/Transaction\";\nimport {AppState} from \"../Model/AppState\";\nimport {PocketPosition} from \"../Model/PocketPosition\";\nimport {updateCurrency, updateValue} from \"../redux/actions\";\nimport {Currency} from \"../Model/Currency\";\n\nconst mapStateToProps = (state: AppState): TransactionStateProps =>{\n  const getToBalance = state.pockets.find(p=> state.to.currency===p.currency);\n  const toBalance = getToBalance? getToBalance.value : '0';\n  const getFromBalance = state.pockets.find(p=> state.from.currency===p.currency);\n  const fromBalance = getFromBalance? getFromBalance.value : '0';\n  return{\n    to: { ...state.to, balance: toBalance },\n    from: { ...state.from, balance: fromBalance }\n  }\n};\n\n\nconst mapDispatchToProps = (dispatch: any): TransactionDispatchProps =>({\n  handleCurrencyChange: (currency:Currency, position: PocketPosition) => {\n    dispatch(updateCurrency(currency, position));\n  },\n  handleValueChange: (value:string, position: PocketPosition) => {\n    dispatch(updateValue(value, position));\n  }\n});\n\nexport const TransactionContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Transaction);\n","import React from 'react';\nimport {IMoney} from \"../Model/IMoney\";\nimport {symbols} from \"../Model/currencySymbols\";\n\nexport type HeaderProps = {to: IMoney, from: IMoney, rate: number, handleExchange: Function};\n\nexport class Header extends React.PureComponent<HeaderProps> {\n    render() {\n        const {to, from, rate} = this.props;\n        const toSymbol = symbols[to.currency];\n        const fromSymbol = symbols[from.currency];\n        console.log('to', to);\n        console.log('from', from);\n        console.log('rate', rate);\n        return (\n            <div className={'header'}>\n                <button className={'cancel-button btn'}>Cancel</button>\n                <div className={'rate'}>{fromSymbol}1 = {toSymbol}{rate.toFixed(4)}</div>\n                <button className={'exchange-button btn'} onClick={this.handleExchange}>Exchange</button>\n            </div>\n        )\n    }\n\n    handleExchange = () => {\n        this.props.handleExchange();\n    }\n}\n","import {connect} from \"react-redux\";\nimport {Header} from \"../components/Header\";\nimport {AppState} from \"../Model/AppState\";\nimport {exchangeMoney} from \"../redux/actions\";\n\nconst mapStateToProps = (state: AppState) =>({\n    to: state.to,\n    from: state.from,\n    rate: state.rate\n});\n\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    handleExchange: () =>{\n        dispatch(exchangeMoney());\n    }\n});\n\nexport const HeaderContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Header);\n","import React from 'react';\nimport {TransactionContainer} from \"../containers/TransactionContainer\";\nimport {HeaderContainer} from \"../containers/HeaderContainer\";\n\nexport type ExchangeWidgetProps= { getRates: Function }\n\nexport class ExchangeWidget extends React.PureComponent<ExchangeWidgetProps> {\n\n    componentDidMount(): void {\n        this.props.getRates();\n        setInterval(this.props.getRates, 10000);\n    }\n\n    render() {\n        return (\n            <div className={'exchange-widget'}>\n                <HeaderContainer/>\n                <TransactionContainer/>\n            </div>\n        )\n    }\n}\n","import {connect} from \"react-redux\";\nimport {updateRatesRequest} from \"../redux/actions\";\nimport {ExchangeWidget} from \"../components/ExchangeWidget\";\n\nconst mapStateToProps = () =>({});\n\nconst mapDispatchToProps = (dispatch: any) => ({\n    getRates: () =>{\n        dispatch(updateRatesRequest());\n    }\n});\n\nexport const ExchangeWidgetContainer = connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ExchangeWidget);\n\n\n","import React from 'react';\nimport './App.scss';\nimport {ExchangeWidgetContainer} from \"./containers/ExchangeWidgetContainer\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExchangeWidgetContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AppState} from \"../Model/AppState\";\nimport {Currency} from \"../Model/Currency\";\n\nexport const initialExchangeWidgetState: AppState = {\n    pockets: [\n        {\n            currency: Currency.EUR,\n            value: '0.00'\n        },\n        {\n            currency: Currency.GBP,\n            value: '1000.00'\n        },\n        {\n            currency: Currency.USD,\n            value: '0.00'\n        }\n    ],\n    to: {\n        currency: Currency.USD,\n        value: ''\n    },\n    from: {\n        currency: Currency.GBP,\n        value: ''\n\n    },\n    rate: 1.13,\n    rates: {\n        [Currency.EUR]: 0.897935,\n        [Currency.GBP]: 0.78255,\n        [Currency.USD]: 1\n    }\n\n};\n","import {AppState, RatesMap} from \"../Model/AppState\";\nimport {initialExchangeWidgetState} from \"./initialState\";\nimport {\n    EXCHANGE_MONEY,\n    ExchangeWidgetAsyncTypes,\n    ExchangeWidgetTypes,\n    UPDATE_CURRENCY,\n    UPDATE_RATES_REQUEST,\n    UPDATE_RATES_SUCCESS,\n    UPDATE_VALUE\n} from \"./actions\";\nimport {Currency} from \"../Model/Currency\";\nimport {PocketPosition} from \"../Model/PocketPosition\";\n\n\nexport function appReducer(state: AppState = initialExchangeWidgetState, action: ExchangeWidgetTypes | ExchangeWidgetAsyncTypes): AppState {\n    switch (action.type) {\n        case UPDATE_VALUE:\n            if (action.position === PocketPosition.TO) {\n                return {\n                    ...state,\n                    to: {...state.to, value: action.value},\n                    from: {...state.from, value: calculateValue(action.value, 1/state.rate)}\n                };\n            } else {\n                return {\n                    ...state,\n                    from: {...state.from, value: action.value},\n                    to: {...state.to, value: calculateValue(action.value, state.rate)}\n                };\n            }\n        case UPDATE_CURRENCY:\n            if (action.position === PocketPosition.TO) {\n                //if currency same as from currency flip from currency to old to currency\n                const fromCurrency = action.currency === state.from.currency ? state.to.currency : state.from.currency;\n                //calculate the new rate\n                const newRate = calculateRate(fromCurrency, action.currency, state.rates);\n                //calculate to value\n                return {\n                    ...state,\n                    from: {...state.from, currency: fromCurrency},\n                    to: {\n                        ...state.to,\n                        currency: action.currency,\n                        value: calculateValue(state.from.value, newRate)\n                    },\n                    rate: newRate\n                }\n            } else {\n                //if currency same as to currency flip to currency to old from currency\n                const toCurrency = action.currency === state.to.currency ? state.from.currency : state.to.currency;\n                //calculate the new rate\n                const newRate = calculateRate(action.currency, toCurrency, state.rates);\n                //calculate to value\n                return {\n                    ...state,\n                    to: {...state.to, currency: toCurrency, value: calculateValue(state.from.value, newRate)},\n                    from: {...state.from, currency: action.currency},\n                    rate: newRate\n                }\n            }\n        case EXCHANGE_MONEY:\n            return {\n                ...state,\n                pockets: state.pockets.map(pocket => {\n                    const deducted = parseFloat(pocket.value) - parseFloat(state.from.value);\n                    const summed =  parseFloat(pocket.value) + parseFloat(state.to.value);\n                    if (state.from.currency === pocket.currency) {\n                        return {...pocket, value: !isNaN(deducted) && !isNaN(summed) ? formatValue(deducted): pocket.value};\n                    } else if (state.to.currency === pocket.currency) {\n                        return {...pocket, value: !isNaN(deducted) && !isNaN(summed) ? formatValue(summed): pocket.value};\n                    } else {\n                        return pocket\n                    }\n                }),\n                to: {...state.to, value:''},\n                from: {...state.from, value:''}\n            };\n        case UPDATE_RATES_REQUEST:\n            //note we could set something on the state here to show we are awaiting the response\n            return {...state};\n        case UPDATE_RATES_SUCCESS:\n            const rate = calculateRate(state.from.currency, state.to.currency, action.rates);\n            return {...state, rates: action.rates, rate};\n        default:\n            return state\n    }\n}\n\n\nexport function calculateRate(fromCurrency: Currency, toCurrency: Currency, rates: RatesMap): number {\n    const toRate = rates[toCurrency];\n    const fromRate = rates[fromCurrency];\n    return toRate / fromRate;\n}\n\nexport function calculateValue(value:string, rate:number): string{\n    const newValue = parseFloat(value);\n    return (isNaN(newValue) ? '': formatValue(newValue * rate));\n}\n\nexport function formatValue(value: number) {\n    const rounded = Math.floor(value *100) /100;\n    return rounded.toFixed(2);\n}\n","import {applyMiddleware, createStore} from \"redux\";\nimport {appReducer} from \"./reducers\";\nimport thunkMiddleware from \"redux-thunk\";\n\nexport const store = createStore(appReducer, applyMiddleware(\n    thunkMiddleware\n));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}